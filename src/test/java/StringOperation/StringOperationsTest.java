/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package StringOperation;

import jdk.nashorn.internal.ir.annotations.Ignore;
import org.junit.jupiter.api.Test;


import static org.junit.jupiter.api.Assertions.*;

class StringOperationsTest {
    StringOperations testString = new StringOperations();

    @Test void test_reverse() {
        String reverse = testString.reverse("poniedziałek");
        String expected = "kełaizdeinop";
        assertEquals(expected, reverse);
    }

    @Test void test_reverse_empty(){
        assertEquals(testString.reverse(""), "");
    }
    @Test void test_reverse_null(){
        assertThrows(NullPointerException.class, () -> {
            testString.reverse(null);
        });

    }

    @Test void test_concat_two_empty(){
        String str1 = "";
        String str2 = "";
        assertEquals(null, testString.concat(str1, str2));

    }

    @Test void test_concat_two_null(){
        String str1 = null;
        String str2 = null;
        assertEquals(null, testString.concat(str1, str2));
    }
    @Test void test_concat_first_empty(){
        String str1 = "";
        String str2 = "something";
        assertEquals(null, testString.concat(str1, str2));
    }
    @Test void test_concat_second_null(){
        String str1 = "some";
        String str2 = null;
        String expected = "some";
        assertEquals( expected, testString.concat(str1, str2));
    }

    @Test void test_concat_second_empty(){
        String str1 = "something";
        String str2 = "";
        String expected = "something";
        assertEquals(expected, testString.concat(str1, str2));
    }

    @Test void test_concat(){
        String str1 = "some";
        String str2 = "thing";
        String expected = "something";
        assertEquals(expected, testString.concat(str1, str2));
    }

    @Test void test_palindrome_empty(){
        String str = "";
        assertTrue(testString.isPalindrome(str));
    }

    @Test void test_palindrome_null(){
        String str = null;
        assertThrows(NullPointerException.class, () -> {
             testString.isPalindrome(str);
        });
    }

    @Test void test_palindrome_one_letter(){
        String str = "o";
        assertTrue(testString.isPalindrome(str));
    }
    @Test void test_palindrome_two_letters(){
        String str = "on";
        assertFalse(testString.isPalindrome(str));
    }
    @Test void test_palindrome_three_letters(){
        String str = "ono";
        assertTrue(testString.isPalindrome(str));
    }

    @Test void test_palindrome_more_letters(){
        String str = "madam";
        assertTrue(testString.isPalindrome(str));
    }

    @Test void test_palindrome_more_letters_false(){
        String str = "madame";
        assertFalse(testString.isPalindrome(str));
    }
    @Test void test_palindrome_evenlonger(){
        String str = "remadamer";
        assertTrue(testString.isPalindrome(str));
    }




}
